input_select:
  # Need at least 1 option for the config check, which will be overwritten during startup
  hue_group:
    name: Select Hue group
    options:
      - Alarm
  #    initial: Alarm
  hue_dynamic_scene:
    name: Hue Dynamic scene
    options:
      - 'Alarm - Tyrell'

input_number:
  hue_dynamic_scene_speed:
    name: Hue scene speed
    min: 0
    max: 100
    step: 10
  hue_dynamic_scene_brightness:
    name: Hue scene brightness
    min: 0
    max: 255
    step: 10

template:
  binary_sensor:
    - unique_id: selected_hue_group_active_scene
      name: Selected Hue group active scene
      state: >
        {% set select = states('input_select.hue_group')|slugify %}
        {% set group = 'light.' + select %}
        {{ is_state_attr(group, 'dynamics', true) }}

    - unique_id: selected_hue_group_has_active_scenes_available
      name: Selected Hue group has active scenes available
      state: >
        {% set hue_group = states('input_select.hue_group') %}
        {{ states.scene
            | selectattr('attributes.group_name', 'eq', hue_group)
            | selectattr('attributes.is_dynamic', 'eq', true)
            | list
            | length != 0 }}

    - unique_id: hue_groups_dynamic_scening
      name: Hue groups dynamic scening
      state: >
        {{ states.light
            | selectattr('attributes.dynamics', 'eq', true)
            | list
            | length != 0 }}

script:
  activate_hue_dynamic_scene:
    alias: Activate Hue dynamic scene
    mode: restart
    icon: mdi:power
    sequence:
      - condition: >
          {{ is_state('binary_sensor.selected_hue_group_active_scene', 'off') }}
      # First record current state of lights in the selected group
      - service: scene.create
        data:
          scene_id: before_dynamic_scene
          snapshot_entities:
            - >
              {% set select = states('input_select.hue_group')|slugify %}
              {% set group = 'light.' + select %}
              {{ group }}
      - service: hue.activate_scene
        data:
          dynamic: true
          speed: >
            {{ states('input_number.hue_dynamic_scene_speed') | int }}
          brightness: >
            {{ states('input_number.hue_dynamic_scene_brightness') | int }}
        target:
          entity_id: >
            {% set select = states('input_select.hue_dynamic_scene')|slugify %}
            {{ 'scene.' + select }}

  deactivate_hue_dynamic_scene:
    alias: Deactivate Hue dynamic scene
    mode: restart
    icon: mdi:power-off
    sequence:
      - condition: >
          {{ is_state('binary_sensor.selected_hue_group_active_scene', 'on') }}
      - service: hue.activate_scene
        data:
          dynamic: false
        target:
          entity_id: >
            {% set select = states('input_select.hue_dynamic_scene')|slugify %}
            {{ 'scene.' + select }}
      # Reset the lights to the state before the dynamic scene activation
      - service: scene.turn_on
        target:
          entity_id: scene.before_dynamic_scene

automation:
  - alias: Auto populate light input select
    mode: restart
    triggers:
      - event_type: delayed_homeassistant_start
        trigger: event
    actions:
      - service: input_select.set_options
        target:
          entity_id: input_select.all_lights
        data:
          options: >
            {{ states.light | map(attribute='name') | list }}